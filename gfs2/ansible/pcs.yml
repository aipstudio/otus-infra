- hosts: initiators
  remote_user: centos
  become: true
  tasks:
    - name: install packets
      yum:
        name: [ 'gfs2-utils', 'lvm2-cluster', 'pcs', 'dlm' ]
        update_cache: yes
        state: latest
      when: ansible_distribution == 'CentOS'

    - name: install packets
      apt:
        name: [ 'gfs2-utils', 'lvm2', 'pcs', 'dlm-controld' ]
        update_cache: yes
        state: latest
      when: ansible_distribution == 'Debian'

    - name: generate passwd
      set_fact:
        hacluster_password: "{{ lookup('ansible.builtin.password', '/dev/null', length=20, chars=['ascii_letters', 'digits']) }}"
      run_once: true

    - name: set password for hacluster
      user:
        name: hacluster
        password: "{{ hacluster_password | password_hash('sha512') }}"

    - name: edit hosts
      blockinfile:
        path: /etc/hosts
        marker: "# {mark} ANSIBLE MANAGED BLOCK HOSTS"
        block: "{{ item }}"
      loop:
        - "{{lookup('ansible.builtin.template', 'hosts') }}"

    - name: enable pcsd
      systemd:
        name: pcsd
        state: restarted
        enabled: true

    - name: destroy cluster pacemaker/corosync
      shell: pcs cluster destroy --force

    - name: create cluster pcs
      shell: |
        #pcs host auth initiator-1 initiator-2 -u hacluster -p "{{ hacluster_password }}"
        pcs cluster auth {% for host in vars['play_hosts'] %}{{ hostvars[host].inventory_hostname }} addr={{ hostvars[host]['ansible_default_ipv4']['address'] }} {% endfor %} -u hacluster -p "{{ hacluster_password }}"
        pcs cluster setup --name gfs2 initiator-1 initiator-2 --force
        pcs cluster start --all
        pcs cluster enable --all
        pcs property set stonith-enabled=false
        pcs property set no-quorum-policy=freeze
        pcs resource create dlm systemd:dlm op monitor interval=30s on-fail=ignore clone interleave=true ordered=true
        pcs resource create clvmd ocf:heartbeat:clvm op monitor interval=30s on-fail=ignore clone interleave=true ordered=true
        pcs constraint order start dlm-clone then clvmd-clone
      run_once: true

    - name: show info get
      shell:  pcs status resources
      register: info
      run_once: true

    - name: show info
      debug:
        msg: "{{ info.stdout_lines }}"
      run_once: true
